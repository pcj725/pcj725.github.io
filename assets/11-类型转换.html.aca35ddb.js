import{_ as o,o as p,c,a as n,b as e,d as s,e as t,r as l}from"./app.a23ae05c.js";const i={},r=n("h1",{id:"\u7C7B\u578B\u8F6C\u6362",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u7C7B\u578B\u8F6C\u6362","aria-hidden":"true"},"#"),s(" \u7C7B\u578B\u8F6C\u6362")],-1),d=n("h2",{id:"\u5B57\u7B26\u4E32",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u5B57\u7B26\u4E32","aria-hidden":"true"},"#"),s(" \u5B57\u7B26\u4E32")],-1),u=s("eslint: "),k={href:"https://eslint.org/docs/latest/rules/no-new-wrappers",target:"_blank",rel:"noopener noreferrer"},v=s("no-new-wrappers"),m=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>
<span class="token keyword">const</span> totalScore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reviewScore<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// typeof totalScore is &quot;object&quot; not &quot;string&quot;</span>

<span class="token comment">// bad</span>
<span class="token keyword">const</span> totalScore <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reviewScore <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span> <span class="token comment">// \u5C06\u4F1A\u6267\u884C this.reviewScore.valueOf()</span>

<span class="token comment">// bad</span>
<span class="token keyword">const</span> totalScore <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reviewScore<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u4E0D\u4FDD\u8BC1\u8FD4\u56DE string</span>

<span class="token comment">// good</span>
<span class="token keyword">const</span> totalScore <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reviewScore<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6570\u5B57" tabindex="-1"><a class="header-anchor" href="#\u6570\u5B57" aria-hidden="true">#</a> \u6570\u5B57</h2>`,2),b=s("\u7528 "),_=n("code",null,"Number",-1),h=s(" \u505A\u7C7B\u578B\u8F6C\u6362\uFF0C"),w=n("code",null,"parseInt",-1),g=s(" \u8F6C\u6362 "),f=n("code",null,"string",-1),y=s(" \u5E94\u603B\u662F\u5E26\u4E0A\u57FA\u6570\u3002 eslint: "),x={href:"https://eslint.org/docs/latest/rules/radix",target:"_blank",rel:"noopener noreferrer"},S=s("radix"),V=t(`<blockquote><p>\u51FD\u6570 parseInt \u4F1A\u6839\u636E\u6307\u5B9A\u7684\u57FA\u6570\u5C06\u5B57\u7B26\u4E32\u8F6C\u6362\u4E3A\u6570\u5B57\u3002\u5B57\u7B26\u4E32\u5F00\u5934\u7684\u7A7A\u767D\u5B57\u7B26\u5C06\u4F1A\u88AB\u5FFD\u7565\uFF0C\u5982\u679C\u53C2\u6570\u57FA\u6570\uFF08\u7B2C\u4E8C\u4E2A\u53C2\u6570\uFF09\u4E3A undefined \u6216\u8005 0 \uFF0C\u9664\u975E\u5B57\u7B26\u4E32\u5F00\u5934\u4E3A 0x \u6216 0X\uFF08\u5341\u516D\u8FDB\u5236\uFF09\uFF0C\u4F1A\u9ED8\u8BA4\u5047\u8BBE\u4E3A 10\u3002</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> inputValue <span class="token operator">=</span> <span class="token string">&#39;4&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// bad</span>
<span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// bad</span>
<span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token operator">+</span>inputValue<span class="token punctuation">;</span>

<span class="token comment">// bad</span>
<span class="token keyword">const</span> val <span class="token operator">=</span> inputValue <span class="token operator">&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">// bad</span>
<span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// good</span>
<span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// good</span>
<span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function j(N,q){const a=l("ExternalLinkIcon");return p(),c("div",null,[r,d,n("p",null,[u,n("a",k,[v,e(a)])]),m,n("p",null,[b,_,h,w,g,f,y,n("a",x,[S,e(a)])]),V])}var B=o(i,[["render",j],["__file","11-\u7C7B\u578B\u8F6C\u6362.html.vue"]]);export{B as default};
