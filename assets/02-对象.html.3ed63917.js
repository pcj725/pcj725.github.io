import{_ as c,o as l,c as i,a as n,b as a,d as s,e,r as o}from"./app.a23ae05c.js";const r={},u=n("h1",{id:"\u5BF9\u8C61",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u5BF9\u8C61","aria-hidden":"true"},"#"),s(" \u5BF9\u8C61")],-1),d=n("h2",{id:"\u521B\u5EFA",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u521B\u5EFA","aria-hidden":"true"},"#"),s(" \u521B\u5EFA")],-1),k=s("\u4F7F\u7528\u5BF9\u8C61\u5B57\u9762\u91CF\u8BED\u6CD5\u3002 ESLint: "),v={href:"https://eslint.org/docs/rules/no-new-object.html",target:"_blank",rel:"noopener noreferrer"},m=s("no-new-object"),b=e(`<blockquote><p>\u66F4\u7B80\u6D01\uFF0C\u4E14\u6CA1\u6709\u6027\u80FD\u5DEE\u5F02</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>
<span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// good</span>
<span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),g={start:"2"},h=s("\u4F7F\u7528\u8BA1\u7B97\u5C5E\u6027\u540D\u521B\u5EFA\u4E00\u4E2A\u5E26\u6709\u52A8\u6001\u5C5E\u6027\u540D\u7684\u5BF9\u8C61\u3002"),_=e(`<blockquote><p>\u5C3D\u91CF\u5728\u540C\u4E00\u4E2A\u5730\u65B9\u5B9A\u4E49\u6240\u6709\u5BF9\u8C61\u5C5E\u6027</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">a key named </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>k<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>

<span class="token comment">// bad</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;San Francisco&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">[</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token string">&#39;enabled&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>

<span class="token comment">// good</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;San Francisco&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token string">&#39;enabled&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5C5E\u6027" tabindex="-1"><a class="header-anchor" href="#\u5C5E\u6027" aria-hidden="true">#</a> \u5C5E\u6027</h2>`,3),y=s("\u8BBF\u95EE\u5C5E\u6027\u65F6\u4F7F\u7528\u70B9\u7B26\u53F7\u3002 ESLint: "),f={href:"https://eslint.org/docs/rules/no-new-object.html",target:"_blank",rel:"noopener noreferrer"},w=s("no-new-object"),j=e(`<blockquote><p>\u66F4\u6613\u4E8E\u9605\u8BFB\u3001\u4E0D\u90A3\u4E48\u5197\u957F</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> luke <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">jedi</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// bad</span>
<span class="token keyword">const</span> isJedi <span class="token operator">=</span> luke<span class="token punctuation">[</span><span class="token string">&#39;jedi&#39;</span><span class="token punctuation">]</span>

<span class="token comment">// good</span>
<span class="token keyword">const</span> isJedi <span class="token operator">=</span> luke<span class="token punctuation">.</span>jedi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),x={start:"2"},S=s("\u7528\u5C5E\u6027\u503C\u7F29\u5199\u3002 "),q=e(`<blockquote><p>\u66F4\u7B80\u6D01\uFF0C\u4E14\u53EF\u8BFB\u6027\u66F4\u9AD8\u3002</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> lukeSkywalker <span class="token operator">=</span> <span class="token string">&#39;Luke Skywalker&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// bad</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">lukeSkywalker</span><span class="token operator">:</span> lukeSkywalker<span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// good</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  lukeSkywalker<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),N={start:"3"},E=s("\u53EA\u5BF9\u90A3\u4E9B\u65E0\u6548\u7684\u6807\u793A\u4F7F\u7528\u5F15\u53F7 "),L=n("code",null,"''",-1),V=s(" \u3002ESLint: "),B={href:"https://eslint.org/docs/rules/quote-props.html",target:"_blank",rel:"noopener noreferrer"},O=s("quote-props"),F=e(`<blockquote><p>\u4F18\u5316\u4E86\u4EE3\u7801\u9AD8\u4EAE\uFF0C\u4E5F\u66F4\u5BB9\u6613\u88AB\u8BB8\u591A JS \u5F15\u64CE\u4F18\u5316\u3002</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>
<span class="token keyword">const</span> bad <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;foo&#39;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;bar&#39;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;data-blah&#39;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// good</span>
<span class="token keyword">const</span> good <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token comment">// bar \u4E0E &#39;data-blah&#39; \u5728vsCode\u4E2D\u989C\u8272\u662F\u4E0D\u540C\u7684</span>
  <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;data-blah&#39;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),J={start:"4"},K=s("\u7ED3\u5C3E\u9700\u8981\u9017\u53F7\u3002ESLint: "),A={href:"https://eslint.org/docs/rules/comma-dangle",target:"_blank",rel:"noopener noreferrer"},C=s("comma-dangle"),I=e(`<blockquote><p>\u8FD9\u4F7F git diffs \u66F4\u7B80\u6D01\u3002</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>
<span class="token keyword">const</span> hero <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;Florence&#39;</span><span class="token punctuation">,</span>
<span class="token operator">-</span>    lastName<span class="token operator">:</span> <span class="token string">&#39;Nightingale&#39;</span>
<span class="token operator">+</span>    lastName<span class="token operator">:</span> <span class="token string">&#39;Nightingale&#39;</span><span class="token punctuation">,</span>
<span class="token operator">+</span>    inventorOf<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;coxcomb chart&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;modern nursing&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">// good</span>
<span class="token keyword">const</span> hero <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;Florence&#39;</span><span class="token punctuation">,</span>
     <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;Nightingale&#39;</span><span class="token punctuation">,</span>
<span class="token operator">+</span>    inventorOf<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;coxcomb chart&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;modern nursing&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u65B9\u6CD5" aria-hidden="true">#</a> \u65B9\u6CD5</h2>`,3),T=s("\u7528\u5BF9\u8C61\u65B9\u6CD5\u7B80\u5199\u3002ESLint: "),$={href:"https://eslint.org/docs/rules/comma-dangle",target:"_blank",rel:"noopener noreferrer"},z=s("comma-dangle"),D=e(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>
<span class="token keyword">const</span> atom <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token function-variable function">addValue</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> atom<span class="token punctuation">.</span>value <span class="token operator">+</span> value
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// good</span>
<span class="token keyword">const</span> atom <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token function">addValue</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> atom<span class="token punctuation">.</span>value <span class="token operator">+</span> value
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u62F7\u8D1D" tabindex="-1"><a class="header-anchor" href="#\u62F7\u8D1D" aria-hidden="true">#</a> \u62F7\u8D1D</h2>`,2),G=s("\u5BF9\u8C61\u6D45\u62F7\u8D1D\u65F6\uFF0C\u66F4\u63A8\u8350\u4F7F\u7528\u6269\u5C55\u8FD0\u7B97\u7B26\uFF08\u5373 "),H=n("code",null,"...",-1),M=s(" \u8FD0\u7B97\u7B26\uFF09\u3002ESLint: "),P={href:"https://eslint.org/docs/rules/prefer-object-spread",target:"_blank",rel:"noopener noreferrer"},Q=s("prefer-object-spread"),R=e(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>
<span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> copy <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> original<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// copy =&gt; { a: 1, b: 2, c: 3 }</span>

<span class="token comment">// good</span>
<span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> copy <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>original<span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span>



<span class="token comment">// bad</span>
<span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> copy <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">delete</span> copy<span class="token punctuation">.</span>a

<span class="token comment">// good</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> <span class="token operator">...</span>noA <span class="token punctuation">}</span> <span class="token operator">=</span> copy <span class="token comment">// noA =&gt; { b: 2, c: 3 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function U(W,X){const t=o("ExternalLinkIcon"),p=o("Badge");return l(),i("div",null,[u,d,n("ol",null,[n("li",null,[k,n("a",v,[m,a(t)])])]),b,n("ol",g,[n("li",null,[h,a(p,{text:"\u63A8\u8350",type:"warning"})])]),_,n("ol",null,[n("li",null,[y,n("a",f,[w,a(t)])])]),j,n("ol",x,[n("li",null,[S,a(p,{text:"\u63A8\u8350",type:"warning"})])]),q,n("ol",N,[n("li",null,[E,L,V,n("a",B,[O,a(t)])])]),F,n("ol",J,[n("li",null,[K,n("a",A,[C,a(t)])])]),I,n("p",null,[T,n("a",$,[z,a(t)])]),D,n("p",null,[G,H,M,n("a",P,[Q,a(t)])]),R])}var Z=c(r,[["render",U],["__file","02-\u5BF9\u8C61.html.vue"]]);export{Z as default};
