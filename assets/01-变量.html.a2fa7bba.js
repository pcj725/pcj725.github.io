import{_ as c,o as l,c as i,a as n,b as a,d as s,e as t,r as o}from"./app.a23ae05c.js";const r={},u=n("h1",{id:"\u53D8\u91CF",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u53D8\u91CF","aria-hidden":"true"},"#"),s(" \u53D8\u91CF")],-1),d=n("h2",{id:"\u58F0\u660E",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u58F0\u660E","aria-hidden":"true"},"#"),s(" \u58F0\u660E")],-1),k=s("\u4F7F\u7528 "),v=n("code",null,"const",-1),m=s(" \u58F0\u660E\u4E00\u4E2A\u53EA\u8BFB\u7684\u5E38\u91CF\uFF0C\u907F\u514D\u4F7F\u7528 "),b=n("code",null,"var",-1),_=s("\u3002 ESLint: "),h={href:"https://eslint.org/docs/rules/prefer-const.html",target:"_blank",rel:"noopener noreferrer"},g=s("prefer-const"),f=s(),y={href:"https://eslint.org/docs/rules/no-const-assign.html",target:"_blank",rel:"noopener noreferrer"},w=s("no-const-assign"),x=t(`<blockquote><p><code>const</code> \u58F0\u660E\u4EE3\u8868\u8FD9\u4E2A\u53D8\u91CF\u6C38\u8FDC\u4E0D\u4F1A\u88AB\u91CD\u65B0\u5206\u914D\uFF0C\u51CF\u5C11\u8BA4\u77E5\u8D1F\u62C5\u5E76\u63D0\u9AD8\u53EF\u7EF4\u62A4\u6027\u3002</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span>

<span class="token comment">// good</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),j={start:"2"},N=s("\u5F53\u9700\u8981\u5BF9\u5F15\u7528\u91CD\u65B0\u5206\u914D\u65F6\uFF0C\u4F7F\u7528 "),q=n("code",null,"let",-1),E=s(" \u800C\u4E0D\u662F "),L=n("code",null,"var",-1),B=s("\u3002 ESLint: "),S={href:"https://eslint.org/docs/rules/no-var.html",target:"_blank",rel:"noopener noreferrer"},V=s("no-var"),I=t(`<blockquote><p><code>let</code> \u662F\u5757\u7EA7\u4F5C\u7528\u57DF\uFF0C\u800C <code>var</code> \u662F\u51FD\u6570\u7EA7\u4F5C\u7528\u57DF</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>
<span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  count <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token punctuation">}</span>

<span class="token comment">// good</span>
<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  count <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),X={start:"3"},C=s("\u4E0D\u8981\u4F7F\u7528\u94FE\u5F0F\u58F0\u660E\u53D8\u91CF\u3002 ESLint: "),P={href:"https://eslint.org/docs/rules/no-multi-assign.html",target:"_blank",rel:"noopener noreferrer"},T=s("no-multi-assign"),Y=t(`<blockquote><p>\u94FE\u5F0F\u58F0\u660E\u53EF\u80FD\u4F1A\u5BFC\u81F4\u610F\u60F3\u4E0D\u5230\u7684\u7ED3\u679C\u5E76\u4E14\u96BE\u4EE5\u9605\u8BFB</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u94FE\u5F0F</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">n</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> a
a<span class="token punctuation">.</span>x <span class="token operator">=</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">n</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token comment">// {n: 2}</span>

<span class="token comment">// \u975E\u94FE\u5F0F</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">n</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> a
a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">n</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span>
a<span class="token punctuation">.</span>x <span class="token operator">=</span> a
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// {n:2,x:{...}}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// {n:1}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),z={start:"4"},A=s("\u4E0D\u5141\u8BB8\u6709\u672A\u4F7F\u7528\u7684\u53D8\u91CF\u3002 ESLint: "),D={href:"https://eslint.org/docs/rules/no-unused-vars.html",target:"_blank",rel:"noopener noreferrer"},F=s("no-unused-vars"),G=t(`<blockquote><p>\u8FD9\u4F1A\u5360\u7528\u4EE3\u7801\u4E2D\u7684\u7A7A\u95F4\uFF0C\u5E76\u53EF\u80FD\u5BFC\u81F4\u8BFB\u8005\u6DF7\u6DC6\u3002</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>
<span class="token keyword">function</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x
<span class="token punctuation">}</span>

<span class="token comment">// good</span>
<span class="token keyword">function</span> <span class="token function">getXPlusY</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4F4D\u7F6E" tabindex="-1"><a class="header-anchor" href="#\u4F4D\u7F6E" aria-hidden="true">#</a> \u4F4D\u7F6E</h2>`,3),H=s("\u5728\u9700\u8981\u7684\u5730\u65B9\u58F0\u660E\u53D8\u91CF\uFF0C\u4E14\u653E\u5728\u5408\u7406\u7684\u4F4D\u7F6E\u3002"),J=t(`<blockquote><p>\u907F\u514D\u4E0D\u5FC5\u8981\u7684\u8C03\u7528</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>
<span class="token keyword">function</span> <span class="token function">checkName</span><span class="token punctuation">(</span><span class="token parameter">hasName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hasName <span class="token operator">===</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> name
<span class="token punctuation">}</span>

<span class="token comment">// good</span>
<span class="token keyword">function</span> <span class="token function">checkName</span><span class="token punctuation">(</span><span class="token parameter">hasName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hasName <span class="token operator">===</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u5728\u9700\u8981\u7684\u65F6\u5019\u5206\u914D</span>
  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> name
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function K(M,O){const e=o("ExternalLinkIcon"),p=o("Badge");return l(),i("div",null,[u,d,n("ol",null,[n("li",null,[k,v,m,b,_,n("a",h,[g,a(e)]),f,n("a",y,[w,a(e)])])]),x,n("ol",j,[n("li",null,[N,q,E,L,B,n("a",S,[V,a(e)])])]),I,n("ol",X,[n("li",null,[C,n("a",P,[T,a(e)])])]),Y,n("ol",z,[n("li",null,[A,n("a",D,[F,a(e)])])]),G,n("ol",null,[n("li",null,[H,a(p,{text:"\u63A8\u8350",type:"warning"})])]),J])}var R=c(r,[["render",K],["__file","01-\u53D8\u91CF.html.vue"]]);export{R as default};
